import { Button, Modal, Spin } from "antd";
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { getCarById, getCarByKeywords } from "./api";
import { ICarDetail, IRelatedCar } from "./interfaces";
import FloatingIcon from "@/components/FloatingIcon";
import {
  PreviewImages,
  ImageContainer,
  MainImage,
  PreviewImagesContainer,
  DetailContainer,
  Name,
  LoadingContainer,
  Container,
  ButtonArea,
  RowContent,
  Content,
  RelatedContainer,
  RelatedCarArea,
  RelatedCarTitle,
} from "./styled";
import { useRecoilState } from "recoil";
import { userRoleState } from "@/recoil/atoms/userAtom";

// Component
import EditDeleteCarButton from "./editDelCarBtn";
import RelatedCarCard from "@/components/car/relatedCar";

type Props = {};

function CarDetail({}: Props) {
  // Recoil
  const [role, setRole] = useRecoilState(userRoleState);

  const [carDetail, setCarDetail] = useState<ICarDetail | null>(null);
  const [bigImage, setBigImage] = useState<string>("");
  const [relatedCar, setRelatedCar] = useState<IRelatedCar[]>([]);
  const [loading, setLoading] = useState<boolean>(false);

  const params: { id: string } = useParams();

  const clickPreviewImage = (url: string) => {
    if (url === bigImage) {
      setBigImage(carDetail?.mainImage as string);
    } else {
      setBigImage(url);
    }
  };

  const getData = async () => {
    setLoading(true);
    const resCarDetail = await getCarById(params.id);
    if (resCarDetail) {
      console.log(resCarDetail)
      const resRelatedCar = await getCarByKeywords(resCarDetail.relatedWord);
      setCarDetail(resCarDetail);
      setBigImage(resCarDetail.mainImage);
      setRelatedCar(
        resRelatedCar.filter(
          (item) => item.carId !== carDetail?.carId
        ) as IRelatedCar[]
      );
    }

    setLoading(false);
  };

  function numberWithCommas(x: number) {
    if (!x) return;
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }

  useEffect(() => {
    getData();
  }, []);

  const renderPreviewImage = carDetail?.previewImages.map((img) => (
    <PreviewImages
      src={img}
      onClick={() => clickPreviewImage(img)}
      selected={img === bigImage}
    />
  ));

  const renderRelatedCarCard = relatedCar.map((car) => (
    <RelatedCarCard carDetail={car} />
  ));

  const showElement = (
    <Content>
      <RowContent>
        <ImageContainer>
          <MainImage src={bigImage} />
          <PreviewImagesContainer>{renderPreviewImage}</PreviewImagesContainer>
        </ImageContainer>
        <DetailContainer>
          {role === "admin" && <EditDeleteCarButton carDetail={carDetail} />}
          <Name>
            {carDetail?.name} ‡∏õ‡∏µ {carDetail?.year}
          </Name>
          <div>‡∏£‡∏≤‡∏Ñ‡∏≤ {numberWithCommas(carDetail?.price as number)} ‡∏ö‡∏≤‡∏ó</div>
          {carDetail?.installment && <div>‡∏ú‡πà‡∏≠‡∏ô {numberWithCommas(carDetail?.installment)} ‡∏ö‡∏≤‡∏ó</div>}
          
          <div>‡∏™‡∏µ{carDetail?.color}</div>
          <div>{carDetail?.description}</div>
          <hr />
          <br />
          <div>
            ‡∏≠‡∏≠‡∏Å‡∏£‡∏ñ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå ‡πÑ‡∏°‡πà‡∏Ñ‡πâ‡∏≥ ‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ú‡πà‡∏≠‡∏ô‡∏™‡∏ö‡∏≤‡∏¢‡πÜ ü•∞ <br />
            <br />
            üëâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏Å‡πá‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏£‡∏ñ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà <br />
            üëâ‡∏≠‡∏≠‡∏Å‡∏£‡∏ñ 0 ‡∏ö‡∏≤‡∏ó
            <br />
            üëâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡πà‡∏≤‡∏¢ ‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
            <br />
            üëâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏ñ‡∏∂‡∏á‡∏ö‡πâ‡∏≤‡∏ô ‡∏ü‡∏£‡∏µ !<br />
            üëâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ
            <br />
            üëâ‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà
            <br />
            üëâ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πá‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ
            <br />
            üëâ‡∏≠‡∏≤‡∏¢‡∏∏‡∏á‡∏≤‡∏ô 4 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πá‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ
            <br />
            üëâ‡∏ï‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏Å‡∏ã‡∏¥‡πà‡∏á‡∏Å‡πá‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ
            <br />
            üëâ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏¢‡∏∏‡πà‡∏á‡∏¢‡∏≤‡∏Å
            <br />
            üëâ ‡∏£‡∏ñ‡∏à‡∏≠‡∏î‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î !<br />
            üëâ ‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
            <br />
            üëâ ‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏•‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏Ñ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏•‡∏¢
            <br />
            üëâ ‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏•‡∏¢ <br />
          </div>
          <hr />
          <br />
          <div>
            ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ ‡πÇ‡∏ó‡∏£‡πÄ‡∏•‡∏¢
            <br />
            ‡∏ó‡∏±‡∏Å‡πÑ‡∏•‡∏ô‡πå <a>https://lin.ee/CCjNv5p</a>
            <br />
            0963615936 ‡∏ô‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏∏‡∏©‡∏à‡∏µ‡∏ô
            <br />
            0884838011 ‡πÄ‡∏Æ‡∏µ‡∏¢‡πÄ‡∏õ‡πá‡∏î
            <br />
          </div>
        </DetailContainer>
      </RowContent>

      {relatedCar.length !== 0 && (
        <RowContent>
          <RelatedContainer>
            <RelatedCarTitle>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</RelatedCarTitle>
            <RelatedCarArea>{renderRelatedCarCard}</RelatedCarArea>
          </RelatedContainer>
        </RowContent>
      )}
    </Content>
  );

  const loadingElement = (
    <LoadingContainer>
      <Spin size={"large"} />
    </LoadingContainer>
  );
  return (
    <Container>
      {!loading ? showElement : loadingElement} <FloatingIcon />
    </Container>
  );
}

export default CarDetail;
